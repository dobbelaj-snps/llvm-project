; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt < %s -passes=convert-noalias,verify -S | FileCheck %s
; RUN: opt < %s -passes=convert-noalias,verify,convert-noalias,verify -S | FileCheck %s

target datalayout = "e-i8:8:8-i16:16:16-i32:32:32-i64:32:32-f16:16:16-f32:32:32-f64:32:32-p:32:32:32:32:8-s0:32:32-a0:0:32-S32-n16:32-v128:32:32-P0-p0:32:32:32:32:8"

%struct.a = type { i8 }

; Function Attrs: noreturn
define dso_local void @_Z3fooPii(ptr %_f, i32 %g) local_unnamed_addr #0 {
; CHECK-LABEL: define dso_local void @_Z3fooPii
; CHECK-SAME: (ptr [[_F:%.*]], i32 [[G:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call ptr @llvm.noalias.decl.p0.p0.i32(ptr null, i32 0, metadata [[META2:![0-9]+]])
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @llvm.provenance.noalias.p0.p0.p0.p0.i32(ptr [[_F]], ptr [[TMP0]], ptr null, ptr undef, i32 0, metadata [[META2]]), !tbaa [[TBAA5:![0-9]+]], !noalias !2
; CHECK-NEXT:    br label [[FOR_COND:%.*]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[PROV_H_0:%.*]] = phi ptr [ [[TMP1]], [[ENTRY:%.*]] ], [ [[PROV_H_0]], [[FOR_COND]] ]
; CHECK-NEXT:    [[PROV_H_01:%.*]] = phi ptr [ [[_F]], [[ENTRY]] ], [ [[PROV_H_0]], [[FOR_COND]] ]
; CHECK-NEXT:    [[H_0:%.*]] = phi ptr [ [[_F]], [[ENTRY]] ], [ [[H_0]], [[FOR_COND]] ]
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_A:%.*]], ptr [[H_0]], i32 0, i32 0
; CHECK-NEXT:    [[DOTUNPACK:%.*]] = load i8, ptr [[TMP2]], ptr_provenance ptr [[PROV_H_0]], align 1, !noalias !2
; CHECK-NEXT:    [[TMP3:%.*]] = insertvalue [[STRUCT_A]] undef, i8 [[DOTUNPACK]], 0
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @_Z1b1a([[STRUCT_A]] [[TMP3]]), !noalias !2
; CHECK-NEXT:    br label [[FOR_COND]]
;
entry:
  %0 = call ptr @llvm.noalias.decl.p0.p0.i32(ptr null, i32 0, metadata !2)
  %1 = call ptr @llvm.provenance.noalias.p0.p0.p0.p0.i32(ptr %_f, ptr %0, ptr null, ptr undef, i32 0, metadata !2), !tbaa !5, !noalias !2
  br label %for.cond

for.cond:                                         ; preds = %for.cond, %entry
  %prov.h.0 = phi ptr [ %1, %entry ], [ %h.0.guard, %for.cond ]
  %h.0 = phi ptr [ %_f, %entry ], [ %h.0.guard, %for.cond ]
  %h.0.guard = call ptr @llvm.experimental.ptr.provenance.p0s_struct.as.p0s_struct.as(ptr %h.0, ptr %prov.h.0)
  %2 = getelementptr inbounds %struct.a, ptr %h.0, i32 0, i32 0
  %.unpack = load i8, ptr %2, ptr_provenance ptr %prov.h.0, align 1, !noalias !2
  %3 = insertvalue %struct.a undef, i8 %.unpack, 0
  %call = call i32 @_Z1b1a(%struct.a %3), !noalias !2
  br label %for.cond
}

; Function Attrs: argmemonly nounwind
declare ptr @llvm.noalias.decl.p0.p0.i32(ptr, i32, metadata) #1

declare dso_local i32 @_Z1b1a(%struct.a) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare ptr @llvm.experimental.ptr.provenance.p0s_struct.as.p0s_struct.as(ptr, ptr) #3

; Function Attrs: nounwind readnone speculatable
declare ptr @llvm.provenance.noalias.p0.p0.p0.p0.i32(ptr, ptr, ptr, ptr, i32, metadata) #4

attributes #0 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 7.0.0 "}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_Z3fooPii: f"}
!4 = distinct !{!4, !"_Z3fooPii"}
!5 = !{!6, !6, i64 0}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C++ TBAA"}
