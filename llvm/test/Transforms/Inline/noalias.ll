; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -inline -enable-noalias-to-md-conversion -use-noalias-intrinsic-during-inlining=none -S < %s | FileCheck %s -check-prefixes=CHECK,NONE
; RUN: opt -inline -enable-noalias-to-md-conversion -use-noalias-intrinsic-during-inlining=scopes -S < %s | FileCheck %s -check-prefixes=CHECK,SCOPES
; RUN: opt -inline -enable-noalias-to-md-conversion -use-noalias-intrinsic-during-inlining=full -S < %s | FileCheck %s -check-prefixes=CHECK,FULL
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @hello(float* noalias nocapture %a, float* nocapture readonly %c) #0 {
; CHECK-LABEL: @hello(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load float, float* [[C:%.*]], align 4
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, float* [[A:%.*]], i64 5
; CHECK-NEXT:    store float [[TMP0]], float* [[ARRAYIDX]], align 4
; CHECK-NEXT:    ret void
;
entry:
  %0 = load float, float* %c, align 4
  %arrayidx = getelementptr inbounds float, float* %a, i64 5
  store float %0, float* %arrayidx, align 4
  ret void
}

define void @foo(float* nocapture %a, float* nocapture readonly %c) #0 {
; NONE-LABEL: @foo(
; NONE-NEXT:  entry:
; NONE-NEXT:    [[TMP0:%.*]] = load float, float* [[C:%.*]], align 4
; NONE-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds float, float* [[A:%.*]], i64 5
; NONE-NEXT:    store float [[TMP0]], float* [[ARRAYIDX_I]], align 4
; NONE-NEXT:    [[TMP1:%.*]] = load float, float* [[C]], align 4
; NONE-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, float* [[A]], i64 7
; NONE-NEXT:    store float [[TMP1]], float* [[ARRAYIDX]], align 4
; NONE-NEXT:    ret void
;
; SCOPES-LABEL: @foo(
; SCOPES-NEXT:  entry:
; SCOPES-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata [[META0:![0-9]+]])
; SCOPES-NEXT:    [[TMP0:%.*]] = load float, float* [[C:%.*]], align 4, !noalias !0
; SCOPES-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds float, float* [[A:%.*]], i64 5
; SCOPES-NEXT:    store float [[TMP0]], float* [[ARRAYIDX_I]], align 4, !alias.scope !0
; SCOPES-NEXT:    [[TMP1:%.*]] = load float, float* [[C]], align 4
; SCOPES-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, float* [[A]], i64 7
; SCOPES-NEXT:    store float [[TMP1]], float* [[ARRAYIDX]], align 4
; SCOPES-NEXT:    ret void
;
; FULL-LABEL: @foo(
; FULL-NEXT:  entry:
; FULL-NEXT:    [[TMP0:%.*]] = call i8* @llvm.noalias.decl.p0i8.p0p0f32.i64(float** null, i64 0, metadata [[META0:![0-9]+]])
; FULL-NEXT:    [[TMP1:%.*]] = call float* @llvm.noalias.p0f32.p0i8.p0p0f32.i64(float* [[A:%.*]], i8* [[TMP0]], float** null, i64 0, metadata [[META0]]), !noalias !0
; FULL-NEXT:    [[TMP2:%.*]] = load float, float* [[C:%.*]], align 4, !noalias !0
; FULL-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds float, float* [[TMP1]], i64 5
; FULL-NEXT:    store float [[TMP2]], float* [[ARRAYIDX_I]], align 4, !noalias !0
; FULL-NEXT:    [[TMP3:%.*]] = load float, float* [[C]], align 4
; FULL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, float* [[A]], i64 7
; FULL-NEXT:    store float [[TMP3]], float* [[ARRAYIDX]], align 4
; FULL-NEXT:    ret void
;
entry:
  tail call void @hello(float* %a, float* %c)
  %0 = load float, float* %c, align 4
  %arrayidx = getelementptr inbounds float, float* %a, i64 7
  store float %0, float* %arrayidx, align 4
  ret void
}

define void @hello2(float* noalias nocapture %a, float* noalias nocapture %b, float* nocapture readonly %c) #0 {
; CHECK-LABEL: @hello2(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load float, float* [[C:%.*]], align 4
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, float* [[A:%.*]], i64 5
; CHECK-NEXT:    store float [[TMP0]], float* [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds float, float* [[B:%.*]], i64 8
; CHECK-NEXT:    store float [[TMP0]], float* [[ARRAYIDX1]], align 4
; CHECK-NEXT:    ret void
;
entry:
  %0 = load float, float* %c, align 4
  %arrayidx = getelementptr inbounds float, float* %a, i64 5
  store float %0, float* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds float, float* %b, i64 8
  store float %0, float* %arrayidx1, align 4
  ret void
}

define void @foo2(float* nocapture %a, float* nocapture %b, float* nocapture readonly %c) #0 {
; NONE-LABEL: @foo2(
; NONE-NEXT:  entry:
; NONE-NEXT:    [[TMP0:%.*]] = load float, float* [[C:%.*]], align 4
; NONE-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds float, float* [[A:%.*]], i64 5
; NONE-NEXT:    store float [[TMP0]], float* [[ARRAYIDX_I]], align 4
; NONE-NEXT:    [[ARRAYIDX1_I:%.*]] = getelementptr inbounds float, float* [[B:%.*]], i64 8
; NONE-NEXT:    store float [[TMP0]], float* [[ARRAYIDX1_I]], align 4
; NONE-NEXT:    [[TMP1:%.*]] = load float, float* [[C]], align 4
; NONE-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, float* [[A]], i64 7
; NONE-NEXT:    store float [[TMP1]], float* [[ARRAYIDX]], align 4
; NONE-NEXT:    ret void
;
; SCOPES-LABEL: @foo2(
; SCOPES-NEXT:  entry:
; SCOPES-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata [[META3:![0-9]+]])
; SCOPES-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata [[META6:![0-9]+]])
; SCOPES-NEXT:    [[TMP0:%.*]] = load float, float* [[C:%.*]], align 4, !noalias !8
; SCOPES-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds float, float* [[A:%.*]], i64 5
; SCOPES-NEXT:    store float [[TMP0]], float* [[ARRAYIDX_I]], align 4, !alias.scope !3, !noalias !6
; SCOPES-NEXT:    [[ARRAYIDX1_I:%.*]] = getelementptr inbounds float, float* [[B:%.*]], i64 8
; SCOPES-NEXT:    store float [[TMP0]], float* [[ARRAYIDX1_I]], align 4, !alias.scope !6, !noalias !3
; SCOPES-NEXT:    [[TMP1:%.*]] = load float, float* [[C]], align 4
; SCOPES-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, float* [[A]], i64 7
; SCOPES-NEXT:    store float [[TMP1]], float* [[ARRAYIDX]], align 4
; SCOPES-NEXT:    ret void
;
; FULL-LABEL: @foo2(
; FULL-NEXT:  entry:
; FULL-NEXT:    [[TMP0:%.*]] = call i8* @llvm.noalias.decl.p0i8.p0p0f32.i64(float** null, i64 0, metadata [[META3:![0-9]+]])
; FULL-NEXT:    [[TMP1:%.*]] = call float* @llvm.noalias.p0f32.p0i8.p0p0f32.i64(float* [[A:%.*]], i8* [[TMP0]], float** null, i64 0, metadata [[META3]]), !noalias !6
; FULL-NEXT:    [[TMP2:%.*]] = call i8* @llvm.noalias.decl.p0i8.p0p0f32.i64(float** null, i64 0, metadata [[META8:![0-9]+]])
; FULL-NEXT:    [[TMP3:%.*]] = call float* @llvm.noalias.p0f32.p0i8.p0p0f32.i64(float* [[B:%.*]], i8* [[TMP2]], float** null, i64 0, metadata [[META8]]), !noalias !6
; FULL-NEXT:    [[TMP4:%.*]] = load float, float* [[C:%.*]], align 4, !noalias !6
; FULL-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds float, float* [[TMP1]], i64 5
; FULL-NEXT:    store float [[TMP4]], float* [[ARRAYIDX_I]], align 4, !noalias !6
; FULL-NEXT:    [[ARRAYIDX1_I:%.*]] = getelementptr inbounds float, float* [[TMP3]], i64 8
; FULL-NEXT:    store float [[TMP4]], float* [[ARRAYIDX1_I]], align 4, !noalias !6
; FULL-NEXT:    [[TMP5:%.*]] = load float, float* [[C]], align 4
; FULL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, float* [[A]], i64 7
; FULL-NEXT:    store float [[TMP5]], float* [[ARRAYIDX]], align 4
; FULL-NEXT:    ret void
;
entry:
  tail call void @hello2(float* %a, float* %b, float* %c)
  %0 = load float, float* %c, align 4
  %arrayidx = getelementptr inbounds float, float* %a, i64 7
  store float %0, float* %arrayidx, align 4
  ret void
}

attributes #0 = { nounwind uwtable }
attributes #1 = { argmemonly nounwind }

; NONE-NOT: !0 = 

; SCOPES: !0 = !{!1}
; SCOPES-NEXT: !1 = distinct !{!1, !2, !"hello: %a"}
; SCOPES-NEXT: !2 = distinct !{!2, !"hello"}
; SCOPES-NEXT: !3 = !{!4}
; SCOPES-NEXT: !4 = distinct !{!4, !5, !"hello2: %a"}
; SCOPES-NEXT: !5 = distinct !{!5, !"hello2"}
; SCOPES-NEXT: !6 = !{!7}
; SCOPES-NEXT: !7 = distinct !{!7, !5, !"hello2: %b"}
; SCOPES-NEXT: !8 = !{!4, !7}

; FULL: !0 = !{!1}
; FULL-NEXT: !1 = distinct !{!1, !2, !"hello: %a"}
; FULL-NEXT: !2 = distinct !{!2, !"hello"}
; FULL-NEXT: !3 = !{!4}
; FULL-NEXT: !4 = distinct !{!4, !5, !"hello2: %a"}
; FULL-NEXT: !5 = distinct !{!5, !"hello2"}
; FULL-NEXT: !6 = !{!4, !7}
; FULL-NEXT: !7 = distinct !{!7, !5, !"hello2: %b"}
; FULL-NEXT: !8 = !{!7}
