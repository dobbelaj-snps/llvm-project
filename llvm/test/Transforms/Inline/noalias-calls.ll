; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature
; RUN: opt -basic-aa -inline -enable-noalias-to-md-conversion -use-noalias-intrinsic-during-inlining=none -S < %s | FileCheck %s -check-prefixes=CHECK,NONE
; RUN: opt -basic-aa -inline -enable-noalias-to-md-conversion -use-noalias-intrinsic-during-inlining=scopes -S < %s | FileCheck %s -check-prefixes=CHECK,SCOPES
; RUN: opt -basic-aa -inline -enable-noalias-to-md-conversion -use-noalias-intrinsic-during-inlining=full -S < %s | FileCheck %s -check-prefixes=CHECK,FULL
; RUN: opt -aa-pipeline=basic-aa -passes=inline -enable-noalias-to-md-conversion -use-noalias-intrinsic-during-inlining=none -S < %s | FileCheck %s -check-prefixes=CHECK,NONE
; RUN: opt -aa-pipeline=basic-aa -passes=inline -enable-noalias-to-md-conversion -use-noalias-intrinsic-during-inlining=scopes -S < %s | FileCheck %s -check-prefixes=CHECK,SCOPES
; RUN: opt -aa-pipeline=basic-aa -passes=inline -enable-noalias-to-md-conversion -use-noalias-intrinsic-during-inlining=full -S < %s | FileCheck %s -check-prefixes=CHECK,FULL
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1) #0
declare void @hey() #1

define void @hello(i8* noalias nocapture %a, i8* noalias nocapture readonly %c, i8* nocapture %b) #1 {
; CHECK-LABEL: define {{[^@]+}}@hello
; CHECK-SAME: (i8* noalias nocapture [[A:%.*]], i8* noalias nocapture readonly [[C:%.*]], i8* nocapture [[B:%.*]]) #[[ATTR1:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[L:%.*]] = alloca i8, i32 512, align 1
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[A]], i8* align 16 [[B]], i64 16, i1 false)
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[B]], i8* align 16 [[C]], i64 16, i1 false)
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[A]], i8* align 16 [[C]], i64 16, i1 false)
; CHECK-NEXT:    call void @hey()
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[L]], i8* align 16 [[C]], i64 16, i1 false)
; CHECK-NEXT:    ret void
;
entry:
  %l = alloca i8, i32 512, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %a, i8* align 16 %b, i64 16, i1 0)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %b, i8* align 16 %c, i64 16, i1 0)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %a, i8* align 16 %c, i64 16, i1 0)
  call void @hey()
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %l, i8* align 16 %c, i64 16, i1 0)
  ret void
}

define void @foo(i8* nocapture %a, i8* nocapture readonly %c, i8* nocapture %b) #2 {
; NONE-LABEL: define {{[^@]+}}@foo
; NONE-SAME: (i8* nocapture [[A:%.*]], i8* nocapture readonly [[C:%.*]], i8* nocapture [[B:%.*]]) #[[ATTR2:[0-9]+]] {
; NONE-NEXT:  entry:
; NONE-NEXT:    [[L_I:%.*]] = alloca i8, i32 512, align 1
; NONE-NEXT:    call void @llvm.lifetime.start.p0i8(i64 512, i8* [[L_I]])
; NONE-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[A]], i8* align 16 [[B]], i64 16, i1 false) #[[ATTR2]]
; NONE-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[B]], i8* align 16 [[C]], i64 16, i1 false) #[[ATTR2]]
; NONE-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[A]], i8* align 16 [[C]], i64 16, i1 false) #[[ATTR2]]
; NONE-NEXT:    call void @hey() #[[ATTR2]]
; NONE-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[L_I]], i8* align 16 [[C]], i64 16, i1 false) #[[ATTR2]]
; NONE-NEXT:    call void @llvm.lifetime.end.p0i8(i64 512, i8* [[L_I]])
; NONE-NEXT:    ret void
;
; SCOPES-LABEL: define {{[^@]+}}@foo
; SCOPES-SAME: (i8* nocapture [[A:%.*]], i8* nocapture readonly [[C:%.*]], i8* nocapture [[B:%.*]]) #[[ATTR2:[0-9]+]] {
; SCOPES-NEXT:  entry:
; SCOPES-NEXT:    [[L_I:%.*]] = alloca i8, i32 512, align 1
; SCOPES-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata [[META0:![0-9]+]])
; SCOPES-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata [[META3:![0-9]+]])
; SCOPES-NEXT:    call void @llvm.lifetime.start.p0i8(i64 512, i8* [[L_I]])
; SCOPES-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[A]], i8* align 16 [[B]], i64 16, i1 false) #[[ATTR2]], !noalias !3
; SCOPES-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[B]], i8* align 16 [[C]], i64 16, i1 false) #[[ATTR2]], !noalias !0
; SCOPES-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[A]], i8* align 16 [[C]], i64 16, i1 false) #[[ATTR2]], !alias.scope !5
; SCOPES-NEXT:    call void @hey() #[[ATTR2]], !noalias !5
; SCOPES-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[L_I]], i8* align 16 [[C]], i64 16, i1 false) #[[ATTR2]], !noalias !0
; SCOPES-NEXT:    call void @llvm.lifetime.end.p0i8(i64 512, i8* [[L_I]])
; SCOPES-NEXT:    ret void
;
; FULL-LABEL: define {{[^@]+}}@foo
; FULL-SAME: (i8* nocapture [[A:%.*]], i8* nocapture readonly [[C:%.*]], i8* nocapture [[B:%.*]]) #[[ATTR2:[0-9]+]] {
; FULL-NEXT:  entry:
; FULL-NEXT:    [[L_I:%.*]] = alloca i8, i32 512, align 1
; FULL-NEXT:    [[TMP0:%.*]] = call i8* @llvm.noalias.decl.p0i8.p0p0i8.i64(i8** null, i64 0, metadata [[META0:![0-9]+]])
; FULL-NEXT:    [[TMP1:%.*]] = call i8* @llvm.noalias.p0i8.p0i8.p0p0i8.i64(i8* [[A]], i8* [[TMP0]], i8** null, i64 0, metadata [[META0]]), !noalias !3
; FULL-NEXT:    [[TMP2:%.*]] = call i8* @llvm.noalias.decl.p0i8.p0p0i8.i64(i8** null, i64 0, metadata [[META5:![0-9]+]])
; FULL-NEXT:    [[TMP3:%.*]] = call i8* @llvm.noalias.p0i8.p0i8.p0p0i8.i64(i8* [[C]], i8* [[TMP2]], i8** null, i64 0, metadata [[META5]]), !noalias !3
; FULL-NEXT:    call void @llvm.lifetime.start.p0i8(i64 512, i8* [[L_I]])
; FULL-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[TMP1]], i8* align 16 [[B]], i64 16, i1 false) #[[ATTR2]], !noalias !3
; FULL-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[B]], i8* align 16 [[TMP3]], i64 16, i1 false) #[[ATTR2]], !noalias !3
; FULL-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[TMP1]], i8* align 16 [[TMP3]], i64 16, i1 false) #[[ATTR2]], !noalias !3
; FULL-NEXT:    call void @hey() #[[ATTR2]], !noalias !3
; FULL-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[L_I]], i8* align 16 [[TMP3]], i64 16, i1 false) #[[ATTR2]], !noalias !3
; FULL-NEXT:    call void @llvm.lifetime.end.p0i8(i64 512, i8* [[L_I]])
; FULL-NEXT:    ret void
;
entry:
  tail call void @hello(i8* %a, i8* %c, i8* %b)
  ret void
}

define void @hello_cs(i8* nocapture %a, i8* nocapture readonly %c, i8* nocapture %b) #1 {
; CHECK-LABEL: define {{[^@]+}}@hello_cs
; CHECK-SAME: (i8* nocapture [[A:%.*]], i8* nocapture readonly [[C:%.*]], i8* nocapture [[B:%.*]]) #[[ATTR1]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[L:%.*]] = alloca i8, i32 512, align 1
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[A]], i8* align 16 [[B]], i64 16, i1 false)
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[B]], i8* align 16 [[C]], i64 16, i1 false)
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[A]], i8* align 16 [[C]], i64 16, i1 false)
; CHECK-NEXT:    call void @hey()
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[L]], i8* align 16 [[C]], i64 16, i1 false)
; CHECK-NEXT:    ret void
;
entry:
  %l = alloca i8, i32 512, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %a, i8* align 16 %b, i64 16, i1 0)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %b, i8* align 16 %c, i64 16, i1 0)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %a, i8* align 16 %c, i64 16, i1 0)
  call void @hey()
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %l, i8* align 16 %c, i64 16, i1 0)
  ret void
}

define void @foo_cs(i8* nocapture %a, i8* nocapture readonly %c, i8* nocapture %b) #2 {
; NONE-LABEL: define {{[^@]+}}@foo_cs
; NONE-SAME: (i8* nocapture [[A:%.*]], i8* nocapture readonly [[C:%.*]], i8* nocapture [[B:%.*]]) #[[ATTR2]] {
; NONE-NEXT:  entry:
; NONE-NEXT:    [[L_I:%.*]] = alloca i8, i32 512, align 1
; NONE-NEXT:    call void @llvm.lifetime.start.p0i8(i64 512, i8* [[L_I]])
; NONE-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[A]], i8* align 16 [[B]], i64 16, i1 false) #[[ATTR2]]
; NONE-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[B]], i8* align 16 [[C]], i64 16, i1 false) #[[ATTR2]]
; NONE-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[A]], i8* align 16 [[C]], i64 16, i1 false) #[[ATTR2]]
; NONE-NEXT:    call void @hey() #[[ATTR2]]
; NONE-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[L_I]], i8* align 16 [[C]], i64 16, i1 false) #[[ATTR2]]
; NONE-NEXT:    call void @llvm.lifetime.end.p0i8(i64 512, i8* [[L_I]])
; NONE-NEXT:    ret void
;
; SCOPES-LABEL: define {{[^@]+}}@foo_cs
; SCOPES-SAME: (i8* nocapture [[A:%.*]], i8* nocapture readonly [[C:%.*]], i8* nocapture [[B:%.*]]) #[[ATTR2]] {
; SCOPES-NEXT:  entry:
; SCOPES-NEXT:    [[L_I:%.*]] = alloca i8, i32 512, align 1
; SCOPES-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata [[META6:![0-9]+]])
; SCOPES-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata [[META9:![0-9]+]])
; SCOPES-NEXT:    call void @llvm.lifetime.start.p0i8(i64 512, i8* [[L_I]])
; SCOPES-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[A]], i8* align 16 [[B]], i64 16, i1 false) #[[ATTR2]], !noalias !9
; SCOPES-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[B]], i8* align 16 [[C]], i64 16, i1 false) #[[ATTR2]], !noalias !6
; SCOPES-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[A]], i8* align 16 [[C]], i64 16, i1 false) #[[ATTR2]], !alias.scope !11
; SCOPES-NEXT:    call void @hey() #[[ATTR2]], !noalias !11
; SCOPES-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[L_I]], i8* align 16 [[C]], i64 16, i1 false) #[[ATTR2]], !noalias !6
; SCOPES-NEXT:    call void @llvm.lifetime.end.p0i8(i64 512, i8* [[L_I]])
; SCOPES-NEXT:    ret void
;
; FULL-LABEL: define {{[^@]+}}@foo_cs
; FULL-SAME: (i8* nocapture [[A:%.*]], i8* nocapture readonly [[C:%.*]], i8* nocapture [[B:%.*]]) #[[ATTR2]] {
; FULL-NEXT:  entry:
; FULL-NEXT:    [[L_I:%.*]] = alloca i8, i32 512, align 1
; FULL-NEXT:    [[TMP0:%.*]] = call i8* @llvm.noalias.decl.p0i8.p0p0i8.i64(i8** null, i64 0, metadata [[META6:![0-9]+]])
; FULL-NEXT:    [[TMP1:%.*]] = call i8* @llvm.noalias.p0i8.p0i8.p0p0i8.i64(i8* [[A]], i8* [[TMP0]], i8** null, i64 0, metadata [[META6]]), !noalias !9
; FULL-NEXT:    [[TMP2:%.*]] = call i8* @llvm.noalias.decl.p0i8.p0p0i8.i64(i8** null, i64 0, metadata [[META11:![0-9]+]])
; FULL-NEXT:    [[TMP3:%.*]] = call i8* @llvm.noalias.p0i8.p0i8.p0p0i8.i64(i8* [[C]], i8* [[TMP2]], i8** null, i64 0, metadata [[META11]]), !noalias !9
; FULL-NEXT:    call void @llvm.lifetime.start.p0i8(i64 512, i8* [[L_I]])
; FULL-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[TMP1]], i8* align 16 [[B]], i64 16, i1 false) #[[ATTR2]], !noalias !9
; FULL-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[B]], i8* align 16 [[TMP3]], i64 16, i1 false) #[[ATTR2]], !noalias !9
; FULL-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[TMP1]], i8* align 16 [[TMP3]], i64 16, i1 false) #[[ATTR2]], !noalias !9
; FULL-NEXT:    call void @hey() #[[ATTR2]], !noalias !9
; FULL-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[L_I]], i8* align 16 [[TMP3]], i64 16, i1 false) #[[ATTR2]], !noalias !9
; FULL-NEXT:    call void @llvm.lifetime.end.p0i8(i64 512, i8* [[L_I]])
; FULL-NEXT:    ret void
;
entry:
  tail call void @hello_cs(i8* noalias %a, i8* noalias %c, i8* %b)
  ret void
}

attributes #0 = { argmemonly nofree nosync nounwind willreturn }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind }
attributes #3 = { nounwind uwtable }

; NONE-NOT: !0 =

; SCOPES: !0 = !{!1}
; SCOPES-NEXT: !1 = distinct !{!1, !2, !"hello: %a"}
; SCOPES-NEXT: !2 = distinct !{!2, !"hello"}
; SCOPES-NEXT: !3 = !{!4}
; SCOPES-NEXT: !4 = distinct !{!4, !2, !"hello: %c"}
; SCOPES-NEXT: !5 = !{!1, !4}
; SCOPES-NEXT: !6 = !{!7}
; SCOPES-NEXT: !7 = distinct !{!7, !8, !"hello_cs: %a"}
; SCOPES-NEXT: !8 = distinct !{!8, !"hello_cs"}
; SCOPES-NEXT: !9 = !{!10}
; SCOPES-NEXT: !10 = distinct !{!10, !8, !"hello_cs: %c"}
; SCOPES-NEXT: !11 = !{!7, !10}


; FULL: !0 = !{!1}
; FULL-NEXT: !1 = distinct !{!1, !2, !"hello: %a"}
; FULL-NEXT: !2 = distinct !{!2, !"hello"}
; FULL-NEXT: !3 = !{!1, !4}
; FULL-NEXT: !4 = distinct !{!4, !2, !"hello: %c"}
; FULL-NEXT: !5 = !{!4}
