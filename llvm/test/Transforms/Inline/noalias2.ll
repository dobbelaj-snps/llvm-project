; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature
; RUN: opt -passes=inline -enable-noalias-to-md-conversion -use-noalias-intrinsic-during-inlining=none -S < %s | FileCheck %s --check-prefixes=CHECK,NONE
; RUN: opt -passes=inline -enable-noalias-to-md-conversion -use-noalias-intrinsic-during-inlining=none --enable-knowledge-retention -S < %s | FileCheck %s --check-prefixes=CHECK,NONE
; RUN: opt -passes=inline -enable-noalias-to-md-conversion -use-noalias-intrinsic-during-inlining=scopes -S < %s | FileCheck %s -check-prefixes=CHECK,SCOPES
; RUN: opt -passes=inline -enable-noalias-to-md-conversion -use-noalias-intrinsic-during-inlining=scopes --enable-knowledge-retention -S < %s | FileCheck %s --check-prefixes=CHECK,SCOPES
; RUN: opt -passes=inline -enable-noalias-to-md-conversion -use-noalias-intrinsic-during-inlining=full -S < %s | FileCheck %s -check-prefixes=CHECK,FULL
; RUN: opt -passes=inline -enable-noalias-to-md-conversion -use-noalias-intrinsic-during-inlining=full --enable-knowledge-retention -S < %s | FileCheck %s --check-prefixes=CHECK,FULL

target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @hello(ptr noalias nocapture %a, ptr noalias nocapture readonly %c) #0 {
; CHECK-LABEL: define {{[^@]+}}@hello
; CHECK-SAME: (ptr noalias nocapture [[A:%.*]], ptr noalias nocapture readonly [[C:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load float, ptr [[C]], align 4
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[A]], i64 5
; CHECK-NEXT:    store float [[TMP0]], ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    ret void
;
entry:
  %0 = load float, ptr %c, align 4
  %arrayidx = getelementptr inbounds float, ptr %a, i64 5
  store float %0, ptr %arrayidx, align 4
  ret void
}

define void @foo(ptr noalias nocapture %a, ptr noalias nocapture readonly %c) #0 {
; NONE-LABEL: define {{[^@]+}}@foo
; NONE-SAME: (ptr noalias nocapture [[A:%.*]], ptr noalias nocapture readonly [[C:%.*]]) #[[ATTR0]] {
; NONE-NEXT:  entry:
; NONE-NEXT:    [[TMP0:%.*]] = load float, ptr [[C]], align 4
; NONE-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds float, ptr [[A]], i64 5
; NONE-NEXT:    store float [[TMP0]], ptr [[ARRAYIDX_I]], align 4
; NONE-NEXT:    [[TMP1:%.*]] = load float, ptr [[C]], align 4
; NONE-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[A]], i64 7
; NONE-NEXT:    store float [[TMP1]], ptr [[ARRAYIDX]], align 4
; NONE-NEXT:    ret void
;
; SCOPES-LABEL: define {{[^@]+}}@foo
; SCOPES-SAME: (ptr noalias nocapture [[A:%.*]], ptr noalias nocapture readonly [[C:%.*]]) #[[ATTR0]] {
; SCOPES-NEXT:  entry:
; SCOPES-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata [[META0:![0-9]+]])
; SCOPES-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata [[META3:![0-9]+]])
; SCOPES-NEXT:    [[TMP0:%.*]] = load float, ptr [[C]], align 4, !alias.scope !3, !noalias !0
; SCOPES-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds float, ptr [[A]], i64 5
; SCOPES-NEXT:    store float [[TMP0]], ptr [[ARRAYIDX_I]], align 4, !alias.scope !0, !noalias !3
; SCOPES-NEXT:    [[TMP1:%.*]] = load float, ptr [[C]], align 4
; SCOPES-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[A]], i64 7
; SCOPES-NEXT:    store float [[TMP1]], ptr [[ARRAYIDX]], align 4
; SCOPES-NEXT:    ret void
;
; FULL-LABEL: define {{[^@]+}}@foo
; FULL-SAME: (ptr noalias nocapture [[A:%.*]], ptr noalias nocapture readonly [[C:%.*]]) #[[ATTR0]] {
; FULL-NEXT:  entry:
; FULL-NEXT:    [[TMP0:%.*]] = call ptr @llvm.noalias.decl.p0.p0.i64(ptr null, i64 0, metadata [[META0:![0-9]+]])
; FULL-NEXT:    [[TMP1:%.*]] = call ptr @llvm.noalias.p0.p0.p0.i64(ptr [[A]], ptr [[TMP0]], ptr null, i64 0, metadata [[META0]]), !noalias !3
; FULL-NEXT:    [[TMP2:%.*]] = call ptr @llvm.noalias.decl.p0.p0.i64(ptr null, i64 0, metadata [[META5:![0-9]+]])
; FULL-NEXT:    [[TMP3:%.*]] = call ptr @llvm.noalias.p0.p0.p0.i64(ptr [[C]], ptr [[TMP2]], ptr null, i64 0, metadata [[META5]]), !noalias !3
; FULL-NEXT:    [[TMP4:%.*]] = load float, ptr [[TMP3]], align 4, !noalias !3
; FULL-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i64 5
; FULL-NEXT:    store float [[TMP4]], ptr [[ARRAYIDX_I]], align 4, !noalias !3
; FULL-NEXT:    [[TMP5:%.*]] = load float, ptr [[C]], align 4
; FULL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[A]], i64 7
; FULL-NEXT:    store float [[TMP5]], ptr [[ARRAYIDX]], align 4
; FULL-NEXT:    ret void
;
entry:
  tail call void @hello(ptr %a, ptr %c)
  %0 = load float, ptr %c, align 4
  %arrayidx = getelementptr inbounds float, ptr %a, i64 7
  store float %0, ptr %arrayidx, align 4
  ret void
}

define void @hello2(ptr noalias nocapture %a, ptr noalias nocapture %b, ptr nocapture readonly %c) #0 {
; CHECK-LABEL: define {{[^@]+}}@hello2
; CHECK-SAME: (ptr noalias nocapture [[A:%.*]], ptr noalias nocapture [[B:%.*]], ptr nocapture readonly [[C:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load float, ptr [[C]], align 4
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[A]], i64 6
; CHECK-NEXT:    store float [[TMP0]], ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds float, ptr [[B]], i64 8
; CHECK-NEXT:    store float [[TMP0]], ptr [[ARRAYIDX1]], align 4
; CHECK-NEXT:    ret void
;
entry:
  %0 = load float, ptr %c, align 4
  %arrayidx = getelementptr inbounds float, ptr %a, i64 6
  store float %0, ptr %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds float, ptr %b, i64 8
  store float %0, ptr %arrayidx1, align 4
  ret void
}

; Check that when hello() is inlined into foo(), and then foo() is inlined into
; foo2(), the noalias scopes are properly concatenated.
define void @foo2(ptr nocapture %a, ptr nocapture %b, ptr nocapture readonly %c) #0 {
; NONE-LABEL: define {{[^@]+}}@foo2
; NONE-SAME: (ptr nocapture [[A:%.*]], ptr nocapture [[B:%.*]], ptr nocapture readonly [[C:%.*]]) #[[ATTR0]] {
; NONE-NEXT:  entry:
; NONE-NEXT:    [[TMP0:%.*]] = load float, ptr [[C]], align 4
; NONE-NEXT:    [[ARRAYIDX_I_I:%.*]] = getelementptr inbounds float, ptr [[A]], i64 5
; NONE-NEXT:    store float [[TMP0]], ptr [[ARRAYIDX_I_I]], align 4
; NONE-NEXT:    [[TMP1:%.*]] = load float, ptr [[C]], align 4
; NONE-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds float, ptr [[A]], i64 7
; NONE-NEXT:    store float [[TMP1]], ptr [[ARRAYIDX_I]], align 4
; NONE-NEXT:    [[TMP2:%.*]] = load float, ptr [[C]], align 4
; NONE-NEXT:    [[ARRAYIDX_I1:%.*]] = getelementptr inbounds float, ptr [[A]], i64 6
; NONE-NEXT:    store float [[TMP2]], ptr [[ARRAYIDX_I1]], align 4
; NONE-NEXT:    [[ARRAYIDX1_I:%.*]] = getelementptr inbounds float, ptr [[B]], i64 8
; NONE-NEXT:    store float [[TMP2]], ptr [[ARRAYIDX1_I]], align 4
; NONE-NEXT:    [[TMP3:%.*]] = load float, ptr [[C]], align 4
; NONE-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[A]], i64 7
; NONE-NEXT:    store float [[TMP3]], ptr [[ARRAYIDX]], align 4
; NONE-NEXT:    ret void
;
; SCOPES-LABEL: define {{[^@]+}}@foo2
; SCOPES-SAME: (ptr nocapture [[A:%.*]], ptr nocapture [[B:%.*]], ptr nocapture readonly [[C:%.*]]) #[[ATTR0]] {
; SCOPES-NEXT:  entry:
; SCOPES-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata [[META5:![0-9]+]])
; SCOPES-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata [[META8:![0-9]+]])
; SCOPES-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata [[META10:![0-9]+]])
; SCOPES-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata [[META13:![0-9]+]])
; SCOPES-NEXT:    [[TMP0:%.*]] = load float, ptr [[C]], align 4, !alias.scope !15, !noalias !16
; SCOPES-NEXT:    [[ARRAYIDX_I_I:%.*]] = getelementptr inbounds float, ptr [[A]], i64 5
; SCOPES-NEXT:    store float [[TMP0]], ptr [[ARRAYIDX_I_I]], align 4, !alias.scope !16, !noalias !15
; SCOPES-NEXT:    [[TMP1:%.*]] = load float, ptr [[C]], align 4, !alias.scope !8, !noalias !5
; SCOPES-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds float, ptr [[A]], i64 7
; SCOPES-NEXT:    store float [[TMP1]], ptr [[ARRAYIDX_I]], align 4, !alias.scope !5, !noalias !8
; SCOPES-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata [[META17:![0-9]+]])
; SCOPES-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata [[META20:![0-9]+]])
; SCOPES-NEXT:    [[TMP2:%.*]] = load float, ptr [[C]], align 4, !noalias !22
; SCOPES-NEXT:    [[ARRAYIDX_I1:%.*]] = getelementptr inbounds float, ptr [[A]], i64 6
; SCOPES-NEXT:    store float [[TMP2]], ptr [[ARRAYIDX_I1]], align 4, !alias.scope !17, !noalias !20
; SCOPES-NEXT:    [[ARRAYIDX1_I:%.*]] = getelementptr inbounds float, ptr [[B]], i64 8
; SCOPES-NEXT:    store float [[TMP2]], ptr [[ARRAYIDX1_I]], align 4, !alias.scope !20, !noalias !17
; SCOPES-NEXT:    [[TMP3:%.*]] = load float, ptr [[C]], align 4
; SCOPES-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[A]], i64 7
; SCOPES-NEXT:    store float [[TMP3]], ptr [[ARRAYIDX]], align 4
; SCOPES-NEXT:    ret void
;
; FULL-LABEL: define {{[^@]+}}@foo2
; FULL-SAME: (ptr nocapture [[A:%.*]], ptr nocapture [[B:%.*]], ptr nocapture readonly [[C:%.*]]) #[[ATTR0]] {
; FULL-NEXT:  entry:
; FULL-NEXT:    [[TMP0:%.*]] = call ptr @llvm.noalias.decl.p0.p0.i64(ptr null, i64 0, metadata [[META6:![0-9]+]])
; FULL-NEXT:    [[TMP1:%.*]] = call ptr @llvm.noalias.p0.p0.p0.i64(ptr [[A]], ptr [[TMP0]], ptr null, i64 0, metadata [[META6]]), !noalias !9
; FULL-NEXT:    [[TMP2:%.*]] = call ptr @llvm.noalias.decl.p0.p0.i64(ptr null, i64 0, metadata [[META11:![0-9]+]])
; FULL-NEXT:    [[TMP3:%.*]] = call ptr @llvm.noalias.p0.p0.p0.i64(ptr [[C]], ptr [[TMP2]], ptr null, i64 0, metadata [[META11]]), !noalias !9
; FULL-NEXT:    [[TMP4:%.*]] = call ptr @llvm.noalias.decl.p0.p0.i64(ptr null, i64 0, metadata [[META12:![0-9]+]]), !noalias !9
; FULL-NEXT:    [[TMP5:%.*]] = call ptr @llvm.noalias.p0.p0.p0.i64(ptr [[TMP1]], ptr [[TMP4]], ptr null, i64 0, metadata [[META12]]), !noalias !15
; FULL-NEXT:    [[TMP6:%.*]] = call ptr @llvm.noalias.decl.p0.p0.i64(ptr null, i64 0, metadata [[META17:![0-9]+]]), !noalias !9
; FULL-NEXT:    [[TMP7:%.*]] = call ptr @llvm.noalias.p0.p0.p0.i64(ptr [[TMP3]], ptr [[TMP6]], ptr null, i64 0, metadata [[META17]]), !noalias !15
; FULL-NEXT:    [[TMP8:%.*]] = load float, ptr [[TMP7]], align 4, !noalias !15
; FULL-NEXT:    [[ARRAYIDX_I_I:%.*]] = getelementptr inbounds float, ptr [[TMP5]], i64 5
; FULL-NEXT:    store float [[TMP8]], ptr [[ARRAYIDX_I_I]], align 4, !noalias !15
; FULL-NEXT:    [[TMP9:%.*]] = load float, ptr [[TMP3]], align 4, !noalias !9
; FULL-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i64 7
; FULL-NEXT:    store float [[TMP9]], ptr [[ARRAYIDX_I]], align 4, !noalias !9
; FULL-NEXT:    [[TMP10:%.*]] = call ptr @llvm.noalias.decl.p0.p0.i64(ptr null, i64 0, metadata [[META18:![0-9]+]])
; FULL-NEXT:    [[TMP11:%.*]] = call ptr @llvm.noalias.p0.p0.p0.i64(ptr [[A]], ptr [[TMP10]], ptr null, i64 0, metadata [[META18]]), !noalias !21
; FULL-NEXT:    [[TMP12:%.*]] = call ptr @llvm.noalias.decl.p0.p0.i64(ptr null, i64 0, metadata [[META23:![0-9]+]])
; FULL-NEXT:    [[TMP13:%.*]] = call ptr @llvm.noalias.p0.p0.p0.i64(ptr [[B]], ptr [[TMP12]], ptr null, i64 0, metadata [[META23]]), !noalias !21
; FULL-NEXT:    [[TMP14:%.*]] = load float, ptr [[C]], align 4, !noalias !21
; FULL-NEXT:    [[ARRAYIDX_I1:%.*]] = getelementptr inbounds float, ptr [[TMP11]], i64 6
; FULL-NEXT:    store float [[TMP14]], ptr [[ARRAYIDX_I1]], align 4, !noalias !21
; FULL-NEXT:    [[ARRAYIDX1_I:%.*]] = getelementptr inbounds float, ptr [[TMP13]], i64 8
; FULL-NEXT:    store float [[TMP14]], ptr [[ARRAYIDX1_I]], align 4, !noalias !21
; FULL-NEXT:    [[TMP15:%.*]] = load float, ptr [[C]], align 4
; FULL-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[A]], i64 7
; FULL-NEXT:    store float [[TMP15]], ptr [[ARRAYIDX]], align 4
; FULL-NEXT:    ret void
;
entry:
  tail call void @foo(ptr %a, ptr %c)
  tail call void @hello2(ptr %a, ptr %b, ptr %c)
  %0 = load float, ptr %c, align 4
  %arrayidx = getelementptr inbounds float, ptr %a, i64 7
  store float %0, ptr %arrayidx, align 4
  ret void
}

attributes #0 = { nounwind uwtable }

; NONE-NOT: !0 =

; SCOPES: !0 = !{!1}
; SCOPES-NEXT: !1 = distinct !{!1, !2, !"hello: %a"}
; SCOPES-NEXT: !2 = distinct !{!2, !"hello"}
; SCOPES-NEXT: !3 = !{!4}
; SCOPES-NEXT: !4 = distinct !{!4, !2, !"hello: %c"}
; SCOPES-NEXT: !5 = !{!6}
; SCOPES-NEXT: !6 = distinct !{!6, !7, !"foo: %a"}
; SCOPES-NEXT: !7 = distinct !{!7, !"foo"}
; SCOPES-NEXT: !8 = !{!9}
; SCOPES-NEXT: !9 = distinct !{!9, !7, !"foo: %c"}
; SCOPES-NEXT: !10 = !{!11}
; SCOPES-NEXT: !11 = distinct !{!11, !12, !"hello: %a"}
; SCOPES-NEXT: !12 = distinct !{!12, !"hello"}
; SCOPES-NEXT: !13 = !{!14}
; SCOPES-NEXT: !14 = distinct !{!14, !12, !"hello: %c"}
; SCOPES-NEXT: !15 = !{!14, !9}
; SCOPES-NEXT: !16 = !{!11, !6}
; SCOPES-NEXT: !17 = !{!18}
; SCOPES-NEXT: !18 = distinct !{!18, !19, !"hello2: %a"}
; SCOPES-NEXT: !19 = distinct !{!19, !"hello2"}
; SCOPES-NEXT: !20 = !{!21}
; SCOPES-NEXT: !21 = distinct !{!21, !19, !"hello2: %b"}
; SCOPES-NEXT: !22 = !{!18, !21}

; FULL: !0 = !{!1}
; FULL-NEXT: !1 = distinct !{!1, !2, !"hello: %a"}
; FULL-NEXT: !2 = distinct !{!2, !"hello"}
; FULL-NEXT: !3 = !{!1, !4}
; FULL-NEXT: !4 = distinct !{!4, !2, !"hello: %c"}
; FULL-NEXT: !5 = !{!4}
; FULL-NEXT: !6 = !{!7}
; FULL-NEXT: !7 = distinct !{!7, !8, !"foo: %a"}
; FULL-NEXT: !8 = distinct !{!8, !"foo"}
; FULL-NEXT: !9 = !{!7, !10}
; FULL-NEXT: !10 = distinct !{!10, !8, !"foo: %c"}
; FULL-NEXT: !11 = !{!10}
; FULL-NEXT: !12 = !{!13}
; FULL-NEXT: !13 = distinct !{!13, !14, !"hello: %a"}
; FULL-NEXT: !14 = distinct !{!14, !"hello"}
; FULL-NEXT: !15 = !{!13, !16, !7, !10}
; FULL-NEXT: !16 = distinct !{!16, !14, !"hello: %c"}
; FULL-NEXT: !17 = !{!16}
; FULL-NEXT: !18 = !{!19}
; FULL-NEXT: !19 = distinct !{!19, !20, !"hello2: %a"}
; FULL-NEXT: !20 = distinct !{!20, !"hello2"}
; FULL-NEXT: !21 = !{!19, !22}
; FULL-NEXT: !22 = distinct !{!22, !20, !"hello2: %b"}
; FULL-NEXT: !23 = !{!22}
