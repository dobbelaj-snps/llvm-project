; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=inline -enable-noalias-to-md-conversion -use-noalias-intrinsic-during-inlining=scopes -S < %s | FileCheck %s --check-prefixes=SCOPES
; RUN: opt -passes=inline -enable-noalias-to-md-conversion -use-noalias-intrinsic-during-inlining=full -S < %s | FileCheck %s --check-prefixes=FULL

%class.ah = type { [8 x i8] }

; Test for self recursion:

; Function Attrs: nounwind uwtable
define void @Test01(ptr noalias sret(%class.ah) align 8 %agg.result, i32 %n) local_unnamed_addr #0 !noalias !1 {
; SCOPES-LABEL: @Test01(
; SCOPES-NEXT:  entry:
; SCOPES-NEXT:    [[SWITCH:%.*]] = icmp eq i32 [[N:%.*]], 0
; SCOPES-NEXT:    br i1 [[SWITCH]], label [[SW_BB:%.*]], label [[SW_BB1:%.*]]
; SCOPES:       sw.bb:
; SCOPES-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[CLASS_AH:%.*]], ptr [[AGG_RESULT:%.*]], i64 0, i32 0, i64 1
; SCOPES-NEXT:    store i8 42, ptr [[TMP0]], align 1, !noalias !1
; SCOPES-NEXT:    ret void
; SCOPES:       sw.bb1:
; SCOPES-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata [[META4:![0-9]+]])
; SCOPES-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[CLASS_AH]], ptr [[AGG_RESULT]], i64 0, i32 0, i64 1
; SCOPES-NEXT:    store i8 42, ptr [[TMP1]], align 1, !alias.scope !4, !noalias !7
; SCOPES-NEXT:    ret void
;
; FULL-LABEL: @Test01(
; FULL-NEXT:  entry:
; FULL-NEXT:    [[SWITCH:%.*]] = icmp eq i32 [[N:%.*]], 0
; FULL-NEXT:    br i1 [[SWITCH]], label [[SW_BB:%.*]], label [[SW_BB1:%.*]]
; FULL:       sw.bb:
; FULL-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[CLASS_AH:%.*]], ptr [[AGG_RESULT:%.*]], i64 0, i32 0, i64 1
; FULL-NEXT:    store i8 42, ptr [[TMP0]], align 1, !noalias !1
; FULL-NEXT:    ret void
; FULL:       sw.bb1:
; FULL-NEXT:    [[TMP1:%.*]] = call ptr @llvm.noalias.decl.p0.p0.i64(ptr null, i64 0, metadata [[META4:![0-9]+]])
; FULL-NEXT:    [[TMP2:%.*]] = call ptr @llvm.noalias.p0.p0.p0.i64(ptr [[AGG_RESULT]], ptr [[TMP1]], ptr null, i64 0, metadata [[META4]]), !noalias !7
; FULL-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[CLASS_AH]], ptr [[TMP2]], i64 0, i32 0, i64 1
; FULL-NEXT:    store i8 42, ptr [[TMP3]], align 1, !noalias !8
; FULL-NEXT:    ret void
;
entry:
  %switch = icmp eq i32 %n, 0
  br i1 %switch, label %sw.bb, label %sw.bb1

sw.bb:                                            ; preds = %entry
  %0 = getelementptr inbounds %class.ah, ptr %agg.result, i64 0, i32 0, i64 1
  store i8 42, ptr %0, !noalias !1
  ret void

sw.bb1:                                           ; preds = %entry
  call void @Test01(ptr nonnull sret(%class.ah) align 8 %agg.result, i32 0), !noalias !1
  ret void
}

; And equivalent version, but without the selfrecursion:

; Function Attrs: nounwind uwtable
declare void @Test02c(ptr noalias sret(%class.ah) align 8 %agg.result, i32 %n) local_unnamed_addr #0

; Function Attrs: nounwind uwtable
define void @Test02b(ptr noalias sret(%class.ah) align 8 %agg.result, i32 %n) local_unnamed_addr #0 !noalias !4 {
; SCOPES-LABEL: @Test02b(
; SCOPES-NEXT:  entry:
; SCOPES-NEXT:    [[SWITCH:%.*]] = icmp eq i32 [[N:%.*]], 0
; SCOPES-NEXT:    br i1 [[SWITCH]], label [[SW_BB:%.*]], label [[SW_BB1:%.*]]
; SCOPES:       sw.bb:
; SCOPES-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[CLASS_AH:%.*]], ptr [[AGG_RESULT:%.*]], i64 0, i32 0, i64 1
; SCOPES-NEXT:    store i8 42, ptr [[TMP0]], align 1, !noalias !10
; SCOPES-NEXT:    ret void
; SCOPES:       sw.bb1:
; SCOPES-NEXT:    call void @Test02c(ptr nonnull sret([[CLASS_AH]]) align 8 [[AGG_RESULT]], i32 0), !noalias !10
; SCOPES-NEXT:    ret void
;
; FULL-LABEL: @Test02b(
; FULL-NEXT:  entry:
; FULL-NEXT:    [[SWITCH:%.*]] = icmp eq i32 [[N:%.*]], 0
; FULL-NEXT:    br i1 [[SWITCH]], label [[SW_BB:%.*]], label [[SW_BB1:%.*]]
; FULL:       sw.bb:
; FULL-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[CLASS_AH:%.*]], ptr [[AGG_RESULT:%.*]], i64 0, i32 0, i64 1
; FULL-NEXT:    store i8 42, ptr [[TMP0]], align 1, !noalias !11
; FULL-NEXT:    ret void
; FULL:       sw.bb1:
; FULL-NEXT:    call void @Test02c(ptr nonnull sret([[CLASS_AH]]) align 8 [[AGG_RESULT]], i32 0), !noalias !11
; FULL-NEXT:    ret void
;
entry:
  %switch = icmp eq i32 %n, 0
  br i1 %switch, label %sw.bb, label %sw.bb1

sw.bb:                                            ; preds = %entry
  %0 = getelementptr inbounds %class.ah, ptr %agg.result, i64 0, i32 0, i64 1
  store i8 42, ptr %0, !noalias !4
  ret void

sw.bb1:                                           ; preds = %entry
  call void @Test02c(ptr nonnull sret(%class.ah) align 8 %agg.result, i32 0), !noalias !4
  ret void
}

; Function Attrs: nounwind uwtable
define void @Test02a(ptr noalias sret(%class.ah) align 8 %agg.result, i32 %n) local_unnamed_addr #0 !noalias !7 {
; SCOPES-LABEL: @Test02a(
; SCOPES-NEXT:  entry:
; SCOPES-NEXT:    [[SWITCH:%.*]] = icmp eq i32 [[N:%.*]], 0
; SCOPES-NEXT:    br i1 [[SWITCH]], label [[SW_BB:%.*]], label [[SW_BB1:%.*]]
; SCOPES:       sw.bb:
; SCOPES-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[CLASS_AH:%.*]], ptr [[AGG_RESULT:%.*]], i64 0, i32 0, i64 1
; SCOPES-NEXT:    store i8 42, ptr [[TMP0]], align 1, !noalias !13
; SCOPES-NEXT:    ret void
; SCOPES:       sw.bb1:
; SCOPES-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata [[META16:![0-9]+]])
; SCOPES-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[CLASS_AH]], ptr [[AGG_RESULT]], i64 0, i32 0, i64 1
; SCOPES-NEXT:    store i8 42, ptr [[TMP1]], align 1, !alias.scope !16, !noalias !13
; SCOPES-NEXT:    ret void
;
; FULL-LABEL: @Test02a(
; FULL-NEXT:  entry:
; FULL-NEXT:    [[SWITCH:%.*]] = icmp eq i32 [[N:%.*]], 0
; FULL-NEXT:    br i1 [[SWITCH]], label [[SW_BB:%.*]], label [[SW_BB1:%.*]]
; FULL:       sw.bb:
; FULL-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[CLASS_AH:%.*]], ptr [[AGG_RESULT:%.*]], i64 0, i32 0, i64 1
; FULL-NEXT:    store i8 42, ptr [[TMP0]], align 1, !noalias !14
; FULL-NEXT:    ret void
; FULL:       sw.bb1:
; FULL-NEXT:    [[TMP1:%.*]] = call ptr @llvm.noalias.decl.p0.p0.i64(ptr null, i64 0, metadata [[META17:![0-9]+]])
; FULL-NEXT:    [[TMP2:%.*]] = call ptr @llvm.noalias.p0.p0.p0.i64(ptr [[AGG_RESULT]], ptr [[TMP1]], ptr null, i64 0, metadata [[META17]]), !noalias !20
; FULL-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[CLASS_AH]], ptr [[TMP2]], i64 0, i32 0, i64 1
; FULL-NEXT:    store i8 42, ptr [[TMP3]], align 1, !noalias !20
; FULL-NEXT:    ret void
;
entry:
  %switch = icmp eq i32 %n, 0
  br i1 %switch, label %sw.bb, label %sw.bb1

sw.bb:                                            ; preds = %entry
  %0 = getelementptr inbounds %class.ah, ptr %agg.result, i64 0, i32 0, i64 1
  store i8 42, ptr %0, !noalias !7
  ret void

sw.bb1:                                           ; preds = %entry
  call void @Test02b(ptr nonnull sret(%class.ah) align 8 %agg.result, i32 0), !noalias !7
  ret void
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang"}
!1 = !{!2}
!2 = distinct !{!2, !3, !"Test01: unknown function scope"}
!3 = distinct !{!3, !"Test01"}
!4 = !{!5}
!5 = distinct !{!5, !6, !"Test02b: unknown function scope"}
!6 = distinct !{!6, !"Test02b"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"Test02a: unknown function scope"}
!9 = distinct !{!9, !"Test02a"}

; SCOPES: !0 = !{!"clang"}
; SCOPES-NEXT: !1 = !{!2}
; SCOPES-NEXT: !2 = distinct !{!2, !3, !"Test01: unknown function scope"}
; SCOPES-NEXT: !3 = distinct !{!3, !"Test01"}
; SCOPES-NEXT: !4 = !{!5}
; SCOPES-NEXT: !5 = distinct !{!5, !6, !"Test01: %agg.result"}
; SCOPES-NEXT: !6 = distinct !{!6, !"Test01"}
; SCOPES-NEXT: !7 = !{!8, !2}
; SCOPES-NEXT: !8 = distinct !{!8, !9, !"Test01: unknown function scope"}
; SCOPES-NEXT: !9 = distinct !{!9, !"Test01"}
; SCOPES-NEXT: !10 = !{!11}
; SCOPES-NEXT: !11 = distinct !{!11, !12, !"Test02b: unknown function scope"}
; SCOPES-NEXT: !12 = distinct !{!12, !"Test02b"}
; SCOPES-NEXT: !13 = !{!14}
; SCOPES-NEXT: !14 = distinct !{!14, !15, !"Test02a: unknown function scope"}
; SCOPES-NEXT: !15 = distinct !{!15, !"Test02a"}
; SCOPES-NEXT: !16 = !{!17}
; SCOPES-NEXT: !17 = distinct !{!17, !18, !"Test02b: %agg.result"}
; SCOPES-NEXT: !18 = distinct !{!18, !"Test02b"}

; FULL: !0 = !{!"clang"}
; FULL-NEXT: !1 = !{!2}
; FULL-NEXT: !2 = distinct !{!2, !3, !"Test01: unknown function scope"}
; FULL-NEXT: !3 = distinct !{!3, !"Test01"}
; FULL-NEXT: !4 = !{!5}
; FULL-NEXT: !5 = distinct !{!5, !6, !"Test01: %agg.result"}
; FULL-NEXT: !6 = distinct !{!6, !"Test01"}
; FULL-NEXT: !7 = !{!2, !5}
; FULL-NEXT: !8 = !{!9, !2, !5}
; FULL-NEXT: !9 = distinct !{!9, !10, !"Test01: unknown function scope"}
; FULL-NEXT: !10 = distinct !{!10, !"Test01"}
; FULL-NEXT: !11 = !{!12}
; FULL-NEXT: !12 = distinct !{!12, !13, !"Test02b: unknown function scope"}
; FULL-NEXT: !13 = distinct !{!13, !"Test02b"}
; FULL-NEXT: !14 = !{!15}
; FULL-NEXT: !15 = distinct !{!15, !16, !"Test02a: unknown function scope"}
; FULL-NEXT: !16 = distinct !{!16, !"Test02a"}
; FULL-NEXT: !17 = !{!18}
; FULL-NEXT: !18 = distinct !{!18, !19, !"Test02b: %agg.result"}
; FULL-NEXT: !19 = distinct !{!19, !"Test02b"}
; FULL-NEXT: !20 = !{!15, !18}
