; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -inline -enable-noalias-to-md-conversion -use-noalias-intrinsic-during-inlining=full -S < %s | FileCheck %s

; verify that inlining result in scope duplication
; verify that llvm.noalias.decl is introduced at the location of the inlining

target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind
define dso_local void @copy_npnp(i32* noalias nocapture %dst, i32* noalias nocapture readonly %src) local_unnamed_addr #0 {
; CHECK-LABEL: @copy_npnp(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, i32* [[SRC:%.*]], ptr_provenance i32* undef, align 4, !tbaa [[TBAA2:![0-9]+]]
; CHECK-NEXT:    store i32 [[TMP0]], i32* [[DST:%.*]], ptr_provenance i32* undef, align 4, !tbaa [[TBAA2]]
; CHECK-NEXT:    ret void
;
entry:
  %0 = load i32, i32* %src, ptr_provenance i32* undef, align 4, !tbaa !2
  store i32 %0, i32* %dst, ptr_provenance i32* undef, align 4, !tbaa !2
  ret void
}

; Function Attrs: nounwind
define dso_local void @copy_rprp(i32* nocapture %dst, i32* nocapture readonly %src) local_unnamed_addr #1 {
; CHECK-LABEL: @copy_rprp(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = tail call i8* @llvm.noalias.decl.p0i8.p0p0i32.i64(i32** null, i64 0, metadata [[META6:![0-9]+]])
; CHECK-NEXT:    [[TMP1:%.*]] = tail call i8* @llvm.noalias.decl.p0i8.p0p0i32.i64(i32** null, i64 0, metadata [[META9:![0-9]+]])
; CHECK-NEXT:    [[TMP2:%.*]] = tail call i32* @llvm.provenance.noalias.p0i32.p0i8.p0p0i32.p0p0i32.i64(i32* [[SRC:%.*]], i8* [[TMP1]], i32** null, i32** undef, i64 0, metadata [[META9]]), !tbaa [[TBAA11:![0-9]+]], !noalias !13
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, i32* [[SRC]], ptr_provenance i32* [[TMP2]], align 4, !tbaa [[TBAA2]], !noalias !13
; CHECK-NEXT:    [[TMP4:%.*]] = tail call i32* @llvm.provenance.noalias.p0i32.p0i8.p0p0i32.p0p0i32.i64(i32* [[DST:%.*]], i8* [[TMP0]], i32** null, i32** undef, i64 0, metadata [[META6]]), !tbaa [[TBAA11]], !noalias !13
; CHECK-NEXT:    store i32 [[TMP3]], i32* [[DST]], ptr_provenance i32* [[TMP4]], align 4, !tbaa [[TBAA2]], !noalias !13
; CHECK-NEXT:    ret void
;
entry:
  %0 = tail call i8* @llvm.noalias.decl.p0i8.p0p0i32.i64(i32** null, i64 0, metadata !6)
  %1 = tail call i8* @llvm.noalias.decl.p0i8.p0p0i32.i64(i32** null, i64 0, metadata !9)
  %2 = tail call i32* @llvm.provenance.noalias.p0i32.p0i8.p0p0i32.p0p0i32.i64(i32* %src, i8* %1, i32** null, i32** undef, i64 0, metadata !9), !tbaa !11, !noalias !13
  %3 = load i32, i32* %src, ptr_provenance i32* %2, align 4, !tbaa !2, !noalias !13
  %4 = tail call i32* @llvm.provenance.noalias.p0i32.p0i8.p0p0i32.p0p0i32.i64(i32* %dst, i8* %0, i32** null, i32** undef, i64 0, metadata !6), !tbaa !11, !noalias !13
  store i32 %3, i32* %dst, ptr_provenance i32* %4, align 4, !tbaa !2, !noalias !13
  ret void
}

; Function Attrs: argmemonly nounwind
declare i8* @llvm.noalias.decl.p0i8.p0p0i32.i64(i32**, i64, metadata) #2

; Function Attrs: nofree norecurse nounwind
define dso_local void @test_npnp(i32* nocapture %dst, i32* nocapture readonly %src, i32 %n) local_unnamed_addr #0 {
; CHECK-LABEL: @test_npnp(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call i8* @llvm.noalias.decl.p0i8.p0p0i32.i64(i32** null, i64 0, metadata [[META14:![0-9]+]])
; CHECK-NEXT:    [[TMP1:%.*]] = call i32* @llvm.noalias.p0i32.p0i8.p0p0i32.i64(i32* [[DST:%.*]], i8* [[TMP0]], i32** null, i64 0, metadata [[META14]]), !noalias !17
; CHECK-NEXT:    [[TMP2:%.*]] = call i8* @llvm.noalias.decl.p0i8.p0p0i32.i64(i32** null, i64 0, metadata [[META19:![0-9]+]])
; CHECK-NEXT:    [[TMP3:%.*]] = call i32* @llvm.noalias.p0i32.p0i8.p0p0i32.i64(i32* [[SRC:%.*]], i8* [[TMP2]], i32** null, i64 0, metadata [[META19]]), !noalias !17
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, i32* [[TMP3]], ptr_provenance i32* undef, align 4, !tbaa [[TBAA2]], !noalias !17
; CHECK-NEXT:    store i32 [[TMP4]], i32* [[TMP1]], ptr_provenance i32* undef, align 4, !tbaa [[TBAA2]], !noalias !17
; CHECK-NEXT:    br label [[DO_BODY:%.*]]
; CHECK:       do.body:
; CHECK-NEXT:    [[N_ADDR_0:%.*]] = phi i32 [ [[N:%.*]], [[ENTRY:%.*]] ], [ [[DEC:%.*]], [[DO_BODY]] ]
; CHECK-NEXT:    [[TMP5:%.*]] = call i8* @llvm.noalias.decl.p0i8.p0p0i32.i64(i32** null, i64 0, metadata [[META20:![0-9]+]])
; CHECK-NEXT:    [[TMP6:%.*]] = call i32* @llvm.noalias.p0i32.p0i8.p0p0i32.i64(i32* [[DST]], i8* [[TMP5]], i32** null, i64 0, metadata [[META20]]), !noalias !23
; CHECK-NEXT:    [[TMP7:%.*]] = call i8* @llvm.noalias.decl.p0i8.p0p0i32.i64(i32** null, i64 0, metadata [[META25:![0-9]+]])
; CHECK-NEXT:    [[TMP8:%.*]] = call i32* @llvm.noalias.p0i32.p0i8.p0p0i32.i64(i32* [[SRC]], i8* [[TMP7]], i32** null, i64 0, metadata [[META25]]), !noalias !23
; CHECK-NEXT:    [[TMP9:%.*]] = load i32, i32* [[TMP8]], ptr_provenance i32* undef, align 4, !tbaa [[TBAA2]], !noalias !23
; CHECK-NEXT:    store i32 [[TMP9]], i32* [[TMP6]], ptr_provenance i32* undef, align 4, !tbaa [[TBAA2]], !noalias !23
; CHECK-NEXT:    [[TMP10:%.*]] = call i8* @llvm.noalias.decl.p0i8.p0p0i32.i64(i32** null, i64 0, metadata [[META26:![0-9]+]])
; CHECK-NEXT:    [[TMP11:%.*]] = call i32* @llvm.noalias.p0i32.p0i8.p0p0i32.i64(i32* [[DST]], i8* [[TMP10]], i32** null, i64 0, metadata [[META26]]), !noalias !29
; CHECK-NEXT:    [[TMP12:%.*]] = call i8* @llvm.noalias.decl.p0i8.p0p0i32.i64(i32** null, i64 0, metadata [[META31:![0-9]+]])
; CHECK-NEXT:    [[TMP13:%.*]] = call i32* @llvm.noalias.p0i32.p0i8.p0p0i32.i64(i32* [[SRC]], i8* [[TMP12]], i32** null, i64 0, metadata [[META31]]), !noalias !29
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, i32* [[TMP13]], ptr_provenance i32* undef, align 4, !tbaa [[TBAA2]], !noalias !29
; CHECK-NEXT:    store i32 [[TMP14]], i32* [[TMP11]], ptr_provenance i32* undef, align 4, !tbaa [[TBAA2]], !noalias !29
; CHECK-NEXT:    [[DEC]] = add nsw i32 [[N_ADDR_0]], -1
; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp eq i32 [[N_ADDR_0]], 0
; CHECK-NEXT:    br i1 [[TOBOOL]], label [[DO_END:%.*]], label [[DO_BODY]]
; CHECK:       do.end:
; CHECK-NEXT:    ret void
;
entry:
  tail call void @copy_npnp(i32* %dst, i32* %src)
  br label %do.body

do.body:                                          ; preds = %do.body, %entry
  %n.addr.0 = phi i32 [ %n, %entry ], [ %dec, %do.body ]
  tail call void @copy_npnp(i32* %dst, i32* %src)
  tail call void @copy_npnp(i32* %dst, i32* %src)
  %dec = add nsw i32 %n.addr.0, -1
  %tobool = icmp eq i32 %n.addr.0, 0
  br i1 %tobool, label %do.end, label %do.body

do.end:                                           ; preds = %do.body
  ret void
}

; Function Attrs: nounwind
define dso_local void @test_rprp(i32* nocapture %dst, i32* nocapture readonly %src, i32 %n) local_unnamed_addr #1 {
; CHECK-LABEL: @test_rprp(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = tail call i8* @llvm.noalias.decl.p0i8.p0p0i32.i64(i32** null, i64 0, metadata [[META32:![0-9]+]]) #[[ATTR5:[0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = tail call i8* @llvm.noalias.decl.p0i8.p0p0i32.i64(i32** null, i64 0, metadata [[META35:![0-9]+]]) #[[ATTR5]]
; CHECK-NEXT:    [[TMP2:%.*]] = tail call i32* @llvm.provenance.noalias.p0i32.p0i8.p0p0i32.p0p0i32.i64(i32* [[SRC:%.*]], i8* [[TMP1]], i32** null, i32** undef, i64 0, metadata [[META35]]) #[[ATTR5]], !tbaa [[TBAA11]], !noalias !37
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, i32* [[SRC]], ptr_provenance i32* [[TMP2]], align 4, !tbaa [[TBAA2]], !noalias !37
; CHECK-NEXT:    [[TMP4:%.*]] = tail call i32* @llvm.provenance.noalias.p0i32.p0i8.p0p0i32.p0p0i32.i64(i32* [[DST:%.*]], i8* [[TMP0]], i32** null, i32** undef, i64 0, metadata [[META32]]) #[[ATTR5]], !tbaa [[TBAA11]], !noalias !37
; CHECK-NEXT:    store i32 [[TMP3]], i32* [[DST]], ptr_provenance i32* [[TMP4]], align 4, !tbaa [[TBAA2]], !noalias !37
; CHECK-NEXT:    br label [[DO_BODY:%.*]]
; CHECK:       do.body:
; CHECK-NEXT:    [[N_ADDR_0:%.*]] = phi i32 [ [[N:%.*]], [[ENTRY:%.*]] ], [ [[DEC:%.*]], [[DO_BODY]] ]
; CHECK-NEXT:    [[TMP5:%.*]] = tail call i8* @llvm.noalias.decl.p0i8.p0p0i32.i64(i32** null, i64 0, metadata [[META38:![0-9]+]]) #[[ATTR5]]
; CHECK-NEXT:    [[TMP6:%.*]] = tail call i8* @llvm.noalias.decl.p0i8.p0p0i32.i64(i32** null, i64 0, metadata [[META41:![0-9]+]]) #[[ATTR5]]
; CHECK-NEXT:    [[TMP7:%.*]] = tail call i32* @llvm.provenance.noalias.p0i32.p0i8.p0p0i32.p0p0i32.i64(i32* [[SRC]], i8* [[TMP6]], i32** null, i32** undef, i64 0, metadata [[META41]]) #[[ATTR5]], !tbaa [[TBAA11]], !noalias !43
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, i32* [[SRC]], ptr_provenance i32* [[TMP7]], align 4, !tbaa [[TBAA2]], !noalias !43
; CHECK-NEXT:    [[TMP9:%.*]] = tail call i32* @llvm.provenance.noalias.p0i32.p0i8.p0p0i32.p0p0i32.i64(i32* [[DST]], i8* [[TMP5]], i32** null, i32** undef, i64 0, metadata [[META38]]) #[[ATTR5]], !tbaa [[TBAA11]], !noalias !43
; CHECK-NEXT:    store i32 [[TMP8]], i32* [[DST]], ptr_provenance i32* [[TMP9]], align 4, !tbaa [[TBAA2]], !noalias !43
; CHECK-NEXT:    [[TMP10:%.*]] = tail call i8* @llvm.noalias.decl.p0i8.p0p0i32.i64(i32** null, i64 0, metadata [[META44:![0-9]+]]) #[[ATTR5]]
; CHECK-NEXT:    [[TMP11:%.*]] = tail call i8* @llvm.noalias.decl.p0i8.p0p0i32.i64(i32** null, i64 0, metadata [[META47:![0-9]+]]) #[[ATTR5]]
; CHECK-NEXT:    [[TMP12:%.*]] = tail call i32* @llvm.provenance.noalias.p0i32.p0i8.p0p0i32.p0p0i32.i64(i32* [[SRC]], i8* [[TMP11]], i32** null, i32** undef, i64 0, metadata [[META47]]) #[[ATTR5]], !tbaa [[TBAA11]], !noalias !49
; CHECK-NEXT:    [[TMP13:%.*]] = load i32, i32* [[SRC]], ptr_provenance i32* [[TMP12]], align 4, !tbaa [[TBAA2]], !noalias !49
; CHECK-NEXT:    [[TMP14:%.*]] = tail call i32* @llvm.provenance.noalias.p0i32.p0i8.p0p0i32.p0p0i32.i64(i32* [[DST]], i8* [[TMP10]], i32** null, i32** undef, i64 0, metadata [[META44]]) #[[ATTR5]], !tbaa [[TBAA11]], !noalias !49
; CHECK-NEXT:    store i32 [[TMP13]], i32* [[DST]], ptr_provenance i32* [[TMP14]], align 4, !tbaa [[TBAA2]], !noalias !49
; CHECK-NEXT:    [[DEC]] = add nsw i32 [[N_ADDR_0]], -1
; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp eq i32 [[N_ADDR_0]], 0
; CHECK-NEXT:    br i1 [[TOBOOL]], label [[DO_END:%.*]], label [[DO_BODY]]
; CHECK:       do.end:
; CHECK-NEXT:    ret void
;
entry:
  tail call void @copy_rprp(i32* %dst, i32* %src)
  br label %do.body

do.body:                                          ; preds = %do.body, %entry
  %n.addr.0 = phi i32 [ %n, %entry ], [ %dec, %do.body ]
  tail call void @copy_rprp(i32* %dst, i32* %src)
  tail call void @copy_rprp(i32* %dst, i32* %src)
  %dec = add nsw i32 %n.addr.0, -1
  %tobool = icmp eq i32 %n.addr.0, 0
  br i1 %tobool, label %do.end, label %do.body

do.end:                                           ; preds = %do.body
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32* @llvm.provenance.noalias.p0i32.p0i8.p0p0i32.p0p0i32.i64(i32*, i8*, i32**, i32**, i64, metadata) #3

attributes #0 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang"}
!2 = !{!3, !3, i64 0, i64 4}
!3 = !{!4, i64 4, !"int"}
!4 = !{!5, i64 1, !"omnipotent char"}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"copy_rprp: rdst"}
!8 = distinct !{!8, !"copy_rprp"}
!9 = !{!10}
!10 = distinct !{!10, !8, !"copy_rprp: rsrc"}
!11 = !{!12, !12, i64 0, i64 4}
!12 = !{!4, i64 4, !"any pointer"}
!13 = !{!7, !10}

; CHECK: !0 = !{i32 1, !"wchar_size", i32 4}
; CHECK-NEXT: !1 = !{!"clang"}
; CHECK-NEXT: !2 = !{!3, !3, i64 0, i64 4}
; CHECK-NEXT: !3 = !{!4, i64 4, !"int"}
; CHECK-NEXT: !4 = !{!5, i64 1, !"omnipotent char"}
; CHECK-NEXT: !5 = !{!"Simple C/C++ TBAA"}
; CHECK-NEXT: !6 = !{!7}
; CHECK-NEXT: !7 = distinct !{!7, !8, !"copy_rprp: rdst"}
; CHECK-NEXT: !8 = distinct !{!8, !"copy_rprp"}
; CHECK-NEXT: !9 = !{!10}
; CHECK-NEXT: !10 = distinct !{!10, !8, !"copy_rprp: rsrc"}
; CHECK-NEXT: !11 = !{!12, !12, i64 0, i64 4}
; CHECK-NEXT: !12 = !{!4, i64 4, !"any pointer"}
; CHECK-NEXT: !13 = !{!7, !10}
; CHECK-NEXT: !14 = !{!15}
; CHECK-NEXT: !15 = distinct !{!15, !16, !"copy_npnp: %dst"}
; CHECK-NEXT: !16 = distinct !{!16, !"copy_npnp"}
; CHECK-NEXT: !17 = !{!15, !18}
; CHECK-NEXT: !18 = distinct !{!18, !16, !"copy_npnp: %src"}
; CHECK-NEXT: !19 = !{!18}
; CHECK-NEXT: !20 = !{!21}
; CHECK-NEXT: !21 = distinct !{!21, !22, !"copy_npnp: %dst"}
; CHECK-NEXT: !22 = distinct !{!22, !"copy_npnp"}
; CHECK-NEXT: !23 = !{!21, !24}
; CHECK-NEXT: !24 = distinct !{!24, !22, !"copy_npnp: %src"}
; CHECK-NEXT: !25 = !{!24}
; CHECK-NEXT: !26 = !{!27}
; CHECK-NEXT: !27 = distinct !{!27, !28, !"copy_npnp: %dst"}
; CHECK-NEXT: !28 = distinct !{!28, !"copy_npnp"}
; CHECK-NEXT: !29 = !{!27, !30}
; CHECK-NEXT: !30 = distinct !{!30, !28, !"copy_npnp: %src"}
; CHECK-NEXT: !31 = !{!30}
; CHECK-NEXT: !32 = !{!33}
; CHECK-NEXT: !33 = distinct !{!33, !34, !"copy_rprp: rdst"}
; CHECK-NEXT: !34 = distinct !{!34, !"copy_rprp"}
; CHECK-NEXT: !35 = !{!36}
; CHECK-NEXT: !36 = distinct !{!36, !34, !"copy_rprp: rsrc"}
; CHECK-NEXT: !37 = !{!33, !36}
; CHECK-NEXT: !38 = !{!39}
; CHECK-NEXT: !39 = distinct !{!39, !40, !"copy_rprp: rdst"}
; CHECK-NEXT: !40 = distinct !{!40, !"copy_rprp"}
; CHECK-NEXT: !41 = !{!42}
; CHECK-NEXT: !42 = distinct !{!42, !40, !"copy_rprp: rsrc"}
; CHECK-NEXT: !43 = !{!39, !42}
; CHECK-NEXT: !44 = !{!45}
; CHECK-NEXT: !45 = distinct !{!45, !46, !"copy_rprp: rdst"}
; CHECK-NEXT: !46 = distinct !{!46, !"copy_rprp"}
; CHECK-NEXT: !47 = !{!48}
; CHECK-NEXT: !48 = distinct !{!48, !46, !"copy_rprp: rsrc"}
; CHECK-NEXT: !49 = !{!45, !48}
