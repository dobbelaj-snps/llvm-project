; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -sroa -S -o - %s | FileCheck %s
; RUN: opt -passes=sroa -S -o - %s | FileCheck %s

source_filename = "zzz_test.i"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.e = type { %struct.a }
%struct.a = type { i32, i16, i64 }

@g = external global %union.e, align 8

define i32 @h(%union.e* %p) {
; CHECK-LABEL: @h(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[I_SROA_0_0_P_I8_SROA_CAST:%.*]] = bitcast %union.e* [[P:%.*]] to { i32, i16 }**
; CHECK-NEXT:    [[I_SROA_0_0_COPYLOAD:%.*]] = load { i32, i16 }*, { i32, i16 }** [[I_SROA_0_0_P_I8_SROA_CAST]], align 1, !tbaa.struct !0, !noalias !11
; CHECK-NEXT:    [[I_SROA_4_0_P_I8_SROA_IDX2:%.*]] = getelementptr inbounds [[UNION_E:%.*]], %union.e* [[P]], i64 0, i32 0, i32 2
; CHECK-NEXT:    [[I_SROA_4_0_COPYLOAD:%.*]] = load i64, i64* [[I_SROA_4_0_P_I8_SROA_IDX2]], align 1, !tbaa.struct !14, !noalias !11
; CHECK-NEXT:    [[TMP0:%.*]] = call i8* @llvm.noalias.decl.p0i8.p0p0sl_i32i16s.i64({ i32, i16 }** null, i64 0, metadata [[META11:![0-9]+]])
; CHECK-NEXT:    [[TMP1:%.*]] = call i8* @llvm.noalias.decl.p0i8.p0i64.i64(i64* null, i64 8, metadata [[META11]])
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast { i32, i16 }* [[I_SROA_0_0_COPYLOAD]] to i8*
; CHECK-NEXT:    [[I_SROA_0_0_I_SROA_0_0_COPYLOAD1_NOALIAS:%.*]] = call i8* @llvm.noalias.p0i8.p0i8.p0p0sl_i32i16s.i64(i8* [[TMP2]], i8* [[TMP0]], { i32, i16 }** null, i64 0, metadata [[META11]])
; CHECK-NEXT:    [[I_SROA_0_0_COPYLOAD1_NOALIAS_CAST:%.*]] = bitcast i8* [[I_SROA_0_0_I_SROA_0_0_COPYLOAD1_NOALIAS]] to { i32, i16 }*
; CHECK-NEXT:    store { i32, i16 }* [[I_SROA_0_0_COPYLOAD1_NOALIAS_CAST]], { i32, i16 }** bitcast (%union.e* @g to { i32, i16 }**), align 1, !tbaa.struct !0, !noalias !11
; CHECK-NEXT:    store i64 [[I_SROA_4_0_COPYLOAD]], i64* getelementptr inbounds ([[UNION_E]], %union.e* @g, i64 0, i32 0, i32 2), align 1, !tbaa.struct !14, !noalias !11
; CHECK-NEXT:    ret i32 undef
;
entry:
  %retval = alloca i32, align 4
  %i = alloca %union.e, align 8
  %i.i8 = bitcast %union.e* %i to i8*
  %p.i8 = bitcast %union.e* %p to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %i.i8, i8* %p.i8, i64 16, i1 false), !tbaa.struct !4, !noalias !0
  %0 = call i8* @llvm.noalias.decl.p0i8.p0s_union.es.i64(%union.e* %i, i64 0, metadata !0), !noalias !0
  %1 = call %union.e* @llvm.noalias.copy.guard.p0s_union.es.p0i8(%union.e* %i, i8* %0, metadata !3, metadata !0)
  %2 = bitcast %union.e* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%union.e* @g to i8*), i8* %2, i64 16, i1 false), !tbaa.struct !4, !noalias !0
  %3 = load i32, i32* %retval, align 4
  ret i32 %3
}

; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn
declare i8* @llvm.noalias.decl.p0i8.p0s_union.es.i64(%union.e*, i64, metadata) #1

; Function Attrs: nofree nosync nounwind readnone willreturn
declare %union.e* @llvm.noalias.copy.guard.p0s_union.es.p0i8(%union.e*, i8*, metadata, metadata) #2

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

attributes #0 = { argmemonly nofree nosync nounwind willreturn }
attributes #1 = { inaccessiblememonly nofree nosync nounwind willreturn }
attributes #2 = { nofree nosync nounwind readnone willreturn }
attributes #3 = { argmemonly nofree nounwind willreturn }

!0 = !{!1}
!1 = distinct !{!1, !2, !"h: i"}
!2 = distinct !{!2, !"h"}
!3 = !{i64 16, i64 0, i64 8, i64 1}
!4 = !{i64 0, i64 4, !5, i64 4, i64 2, !9, i64 8, i64 8, !11, i64 0, i64 8, !13}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!10, !10, i64 0}
!10 = !{!"short", !7, i64 0}
!11 = !{!12, !12, i64 0}
!12 = !{!"long", !7, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"any pointer", !7, i64 0}
