; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=sroa -S -o - %s | FileCheck %s

source_filename = "zzz_test.i"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.e = type { %struct.a }
%struct.a = type { i32, i16, i64 }

@g = external global %union.e, align 8

define i32 @h(ptr %p) {
; CHECK-LABEL: @h(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[I_SROA_0_0_COPYLOAD:%.*]] = load ptr, ptr [[P:%.*]], align 1, !tbaa.struct [[TBAA_STRUCT0:![0-9]+]], !noalias !11
; CHECK-NEXT:    [[I_SROA_4_0_P_SROA_IDX:%.*]] = getelementptr inbounds i8, ptr [[P]], i64 8
; CHECK-NEXT:    [[I_SROA_4_0_COPYLOAD:%.*]] = load i64, ptr [[I_SROA_4_0_P_SROA_IDX]], align 1, !tbaa.struct [[TBAA_STRUCT14:![0-9]+]], !noalias !11
; CHECK-NEXT:    [[TMP0:%.*]] = call ptr @llvm.noalias.decl.p0.p0.i64(ptr null, i64 0, metadata [[META11:![0-9]+]])
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @llvm.noalias.decl.p0.p0.i64(ptr null, i64 8, metadata [[META11]])
; CHECK-NEXT:    [[I_SROA_0_0_I_SROA_0_0_COPYLOAD1_NOALIAS:%.*]] = call ptr @llvm.noalias.p0.p0.p0.i64(ptr [[I_SROA_0_0_COPYLOAD]], ptr [[TMP0]], ptr null, i64 0, metadata [[META11]])
; CHECK-NEXT:    store ptr [[I_SROA_0_0_I_SROA_0_0_COPYLOAD1_NOALIAS]], ptr @g, align 1, !tbaa.struct [[TBAA_STRUCT0]], !noalias !11
; CHECK-NEXT:    store i64 [[I_SROA_4_0_COPYLOAD]], ptr getelementptr inbounds (i8, ptr @g, i64 8), align 1, !tbaa.struct [[TBAA_STRUCT14]], !noalias !11
; CHECK-NEXT:    ret i32 undef
;
entry:
  %retval = alloca i32, align 4
  %i = alloca %union.e, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr %i, ptr %p, i64 16, i1 false), !tbaa.struct !4, !noalias !0
  %0 = call ptr @llvm.noalias.decl.p0.p0.i64(ptr %i, i64 0, metadata !0), !noalias !0
  %1 = call ptr @llvm.noalias.copy.guard.p0.p0(ptr %i, ptr %0, metadata !3, metadata !0)
  %2 = bitcast ptr %1 to ptr
  call void @llvm.memcpy.p0.p0.i64(ptr bitcast (ptr @g to ptr), ptr %2, i64 16, i1 false), !tbaa.struct !4, !noalias !0
  %3 = load i32, ptr %retval, align 4
  ret i32 %3
}

; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn
declare ptr @llvm.noalias.decl.p0.p0.i64(ptr, i64, metadata) #1

; Function Attrs: nofree nosync nounwind readnone willreturn
declare ptr @llvm.noalias.copy.guard.p0.p0(ptr, ptr, metadata, metadata) #2

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

attributes #0 = { argmemonly nofree nosync nounwind willreturn }
attributes #1 = { inaccessiblememonly nofree nosync nounwind willreturn }
attributes #2 = { nofree nosync nounwind readnone willreturn }
attributes #3 = { argmemonly nofree nounwind willreturn }

!0 = !{!1}
!1 = distinct !{!1, !2, !"h: i"}
!2 = distinct !{!2, !"h"}
!3 = !{i64 16, i64 0, i64 8, i64 1}
!4 = !{i64 0, i64 4, !5, i64 4, i64 2, !9, i64 8, i64 8, !11, i64 0, i64 8, !13}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!10, !10, i64 0}
!10 = !{!"short", !7, i64 0}
!11 = !{!12, !12, i64 0}
!12 = !{!"long", !7, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"any pointer", !7, i64 0}
