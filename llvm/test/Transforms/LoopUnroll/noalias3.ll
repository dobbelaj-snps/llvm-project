; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals smart
; RUN: opt -S -passes=loop-unroll,verify -unroll-count=4 < %s | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-unknown"

define void @test01(i8 %.pr) #0 {
; CHECK-LABEL: @test01(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = sub i8 1, [[DOTPR:%.*]]
; CHECK-NEXT:    [[TMP1:%.*]] = sub i8 0, [[DOTPR]]
; CHECK-NEXT:    [[XTRAITER:%.*]] = and i8 [[TMP0]], 3
; CHECK-NEXT:    [[LCMP_MOD:%.*]] = icmp ne i8 [[XTRAITER]], 0
; CHECK-NEXT:    br i1 [[LCMP_MOD]], label [[FOR_BODY_PROL_PREHEADER:%.*]], label [[FOR_BODY_PROL_LOOPEXIT:%.*]]
; CHECK:       for.body.prol.preheader:
; CHECK-NEXT:    br label [[FOR_BODY_PROL:%.*]]
; CHECK:       for.body.prol:
; CHECK-NEXT:    [[TMP2:%.*]] = phi i8 [ [[INC_PROL:%.*]], [[FOR_BODY_PROL]] ], [ [[DOTPR]], [[FOR_BODY_PROL_PREHEADER]] ]
; CHECK-NEXT:    [[PROL_ITER:%.*]] = phi i8 [ 0, [[FOR_BODY_PROL_PREHEADER]] ], [ [[PROL_ITER_NEXT:%.*]], [[FOR_BODY_PROL]] ]
; CHECK-NEXT:    [[TMP3:%.*]] = tail call ptr @llvm.noalias.decl.p0.p0.i64(ptr null, i64 0, metadata [[META0:![0-9]+]])
; CHECK-NEXT:    [[INC_PROL]] = add i8 [[TMP2]], 1
; CHECK-NEXT:    [[TOBOOL_NOT_PROL:%.*]] = icmp eq i8 [[TMP2]], 0
; CHECK-NEXT:    [[PROL_ITER_NEXT]] = add i8 [[PROL_ITER]], 1
; CHECK-NEXT:    [[PROL_ITER_CMP:%.*]] = icmp ne i8 [[PROL_ITER_NEXT]], [[XTRAITER]]
; CHECK-NEXT:    br i1 [[PROL_ITER_CMP]], label [[FOR_BODY_PROL]], label [[FOR_BODY_PROL_LOOPEXIT_UNR_LCSSA:%.*]], !llvm.loop [[LOOP3:![0-9]+]]
; CHECK:       for.body.prol.loopexit.unr-lcssa:
; CHECK-NEXT:    [[DOTLCSSA_UNR_PH:%.*]] = phi ptr [ [[TMP3]], [[FOR_BODY_PROL]] ]
; CHECK-NEXT:    [[DOTUNR_PH:%.*]] = phi i8 [ [[INC_PROL]], [[FOR_BODY_PROL]] ]
; CHECK-NEXT:    br label [[FOR_BODY_PROL_LOOPEXIT]]
; CHECK:       for.body.prol.loopexit:
; CHECK-NEXT:    [[DOTLCSSA_UNR:%.*]] = phi ptr [ undef, [[ENTRY:%.*]] ], [ [[DOTLCSSA_UNR_PH]], [[FOR_BODY_PROL_LOOPEXIT_UNR_LCSSA]] ]
; CHECK-NEXT:    [[DOTUNR:%.*]] = phi i8 [ [[DOTPR]], [[ENTRY]] ], [ [[DOTUNR_PH]], [[FOR_BODY_PROL_LOOPEXIT_UNR_LCSSA]] ]
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ult i8 [[TMP1]], 3
; CHECK-NEXT:    br i1 [[TMP4]], label [[FOR_COND_FOR_END_CRIT_EDGE:%.*]], label [[ENTRY_NEW:%.*]]
; CHECK:       entry.new:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[TMP5:%.*]] = phi i8 [ [[DOTUNR]], [[ENTRY_NEW]] ], [ [[INC_3:%.*]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[INC_2:%.*]] = add i8 [[TMP5]], 3
; CHECK-NEXT:    [[TMP6:%.*]] = tail call ptr @llvm.noalias.decl.p0.p0.i64(ptr null, i64 0, metadata [[META5:![0-9]+]])
; CHECK-NEXT:    [[INC_3]] = add i8 [[TMP5]], 4
; CHECK-NEXT:    [[TOBOOL_NOT_3:%.*]] = icmp eq i8 [[INC_2]], 0
; CHECK-NEXT:    br i1 [[TOBOOL_NOT_3]], label [[FOR_COND_FOR_END_CRIT_EDGE_UNR_LCSSA:%.*]], label [[FOR_BODY]], !llvm.loop [[LOOP7:![0-9]+]]
; CHECK:       for.cond.for.end_crit_edge.unr-lcssa:
; CHECK-NEXT:    [[DOTLCSSA_PH:%.*]] = phi ptr [ [[TMP6]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[TMP7:%.*]] = tail call ptr @llvm.noalias.decl.p0.p0.i64(ptr null, i64 0, metadata [[META8:![0-9]+]])
; CHECK-NEXT:    br label [[FOR_COND_FOR_END_CRIT_EDGE]]
; CHECK:       for.cond.for.end_crit_edge:
; CHECK-NEXT:    [[DOTLCSSA:%.*]] = phi ptr [ [[DOTLCSSA_UNR]], [[FOR_BODY_PROL_LOOPEXIT]] ], [ [[TMP7]], [[FOR_COND_FOR_END_CRIT_EDGE_UNR_LCSSA]] ]
; CHECK-NEXT:    [[TMP8:%.*]] = tail call ptr @llvm.noalias.decl.p0.p0.i64(ptr null, i64 0, metadata [[META8]])
; CHECK-NEXT:    [[TMP9:%.*]] = tail call ptr @llvm.provenance.noalias.p0.p0.p0.p0.i64(ptr null, ptr [[TMP8]], ptr null, ptr null, i64 0, metadata [[META8]])
; CHECK-NEXT:    ret void
;
entry:
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %0 = phi i8 [ %inc, %for.body ], [ %.pr, %entry ]
  %1 = tail call ptr @llvm.noalias.decl.p0.p0.i64(ptr null, i64 0, metadata !0)
  %inc = add i8 %0, 1
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %for.cond.for.end_crit_edge, label %for.body

for.cond.for.end_crit_edge:                       ; preds = %for.body
  %2 = tail call ptr @llvm.provenance.noalias.p0.p0.p0.p0.i64(ptr null, ptr %1, ptr null, ptr null, i64 0, metadata !0)
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare ptr @llvm.noalias.decl.p0.p0.i64(ptr, i64, metadata) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare ptr @llvm.provenance.noalias.p0.p0.p0.p0.i64(ptr, ptr, ptr, ptr, i64, metadata) #2

attributes #0 = { "target-cpu"="x86-64" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!0 = !{!1}
!1 = distinct !{!1, !2, !"test01: e"}
!2 = distinct !{!2, !"test01"}
;.
; CHECK: [[META0]] = !{[[META1:![0-9]+]]}
; CHECK: [[META1]] = distinct !{[[META1]], [[META2:![0-9]+]], !"test01: e:It0"}
; CHECK: [[META2]] = distinct !{[[META2]], !"test01"}
; CHECK: [[LOOP3]] = distinct !{[[LOOP3]], [[META4:![0-9]+]]}
; CHECK: [[META4]] = !{!"llvm.loop.unroll.disable"}
; CHECK: [[META5]] = !{[[META6:![0-9]+]]}
; CHECK: [[META6]] = distinct !{[[META6]], [[META2]], !"test01: e:It3"}
; CHECK: [[LOOP7]] = distinct !{[[LOOP7]], [[META4]]}
; CHECK: [[META8]] = !{[[META9:![0-9]+]]}
; CHECK: [[META9]] = distinct !{[[META9]], [[META2]], !"test01: e"}
;.
